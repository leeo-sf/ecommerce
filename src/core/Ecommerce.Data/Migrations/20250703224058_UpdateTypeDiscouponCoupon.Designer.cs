// <auto-generated />
using System;
using Ecommerce.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Ecommerce.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250703224058_UpdateTypeDiscouponCoupon")]
    partial class UpdateTypeDiscouponCoupon
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Ecommerce.Domain.Entity.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedIn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_in")
                        .HasComment("Data de criação");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("neighborhood")
                        .HasComment("Bairro");

                    b.Property<string>("PublicPlace")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("public_place")
                        .HasComment("Logradouro");

                    b.Property<string>("Uf")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("uf")
                        .HasComment("Estado");

                    b.Property<DateTime>("UpdatedIn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_in")
                        .HasComment("Data de atualização");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("zip_code")
                        .HasComment("CEP");

                    b.Property<Guid>("id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("id");

                    b.ToTable("address", null, t =>
                        {
                            t.Property("id")
                                .HasColumnName("id1");
                        });
                });

            modelBuilder.Entity("Ecommerce.Domain.Entity.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedIn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_in")
                        .HasComment("Data de criação");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Nome da categoria");

                    b.Property<DateTime>("UpdatedIn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_in")
                        .HasComment("Data de atualização");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("category", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Domain.Entity.Coupon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code")
                        .HasComment("Código do cupom");

                    b.Property<DateTime>("CreatedIn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_in")
                        .HasComment("Data de criação");

                    b.Property<float>("DiscountPercentage")
                        .HasColumnType("real")
                        .HasColumnName("discount_percentage")
                        .HasComment("Porcentagem do desconto");

                    b.Property<DateTime>("UpdatedIn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_in")
                        .HasComment("Data de atualização");

                    b.Property<DateTime?>("ValidUntil")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("valid_until")
                        .HasComment("Data de validade do cupom de desconto");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("coupon", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Domain.Entity.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id")
                        .HasComment("Identificador da Categoria");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("color")
                        .HasComment("Cor do produto");

                    b.Property<Guid?>("CouponId")
                        .HasColumnType("uuid")
                        .HasColumnName("coupon_id")
                        .HasComment("Identificador do Cupom");

                    b.Property<DateTime>("CreatedIn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_in")
                        .HasComment("Data de criação");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description")
                        .HasComment("Descrição do produto");

                    b.PrimitiveCollection<string[]>("ImagesUrl")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("images_url")
                        .HasComment("Imagens do produto");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(180)
                        .HasColumnType("character varying(180)")
                        .HasColumnName("name")
                        .HasComment("Nome do produto");

                    b.Property<double>("Price")
                        .HasMaxLength(50000)
                        .HasColumnType("double precision")
                        .HasColumnName("price")
                        .HasComment("Preço do produto");

                    b.Property<Guid?>("PromotionId")
                        .HasColumnType("uuid")
                        .HasColumnName("promotion_id")
                        .HasComment("Identificador da Promoção");

                    b.Property<int>("QuantityInStock")
                        .HasMaxLength(10000)
                        .HasColumnType("integer")
                        .HasColumnName("quantity_in_stock")
                        .HasComment("Quantidade de produtos no estoque");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uuid")
                        .HasColumnName("supplier_id")
                        .HasComment("Identificador do fornecedor");

                    b.Property<DateTime>("UpdatedIn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_in")
                        .HasComment("Data de atualização");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CouponId");

                    b.HasIndex("PromotionId");

                    b.HasIndex("SupplierId");

                    b.ToTable("product", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Domain.Entity.Promotion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedIn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_in")
                        .HasComment("Data de criação");

                    b.Property<float?>("DiscountAmount")
                        .HasColumnType("real")
                        .HasColumnName("discount_amount")
                        .HasComment("Valor do desconto");

                    b.Property<int?>("DiscountPercentage")
                        .HasColumnType("integer")
                        .HasColumnName("discount_percentage")
                        .HasComment("Porcentagem do desconto");

                    b.Property<bool>("IsPromotion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_promotion")
                        .HasComment("Produto está em promoção");

                    b.Property<float?>("OriginalValue")
                        .HasColumnType("real")
                        .HasColumnName("original_value")
                        .HasComment("Valor original do produto");

                    b.Property<DateTime>("UpdatedIn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_in")
                        .HasComment("Data de atualização");

                    b.Property<DateTime?>("ValidUntil")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("valid_until")
                        .HasComment("Data de validade do cupom de desconto");

                    b.HasKey("Id");

                    b.ToTable("promotion", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Domain.Entity.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)")
                        .HasColumnName("cnpj")
                        .HasComment("CNPJ do fornecedor");

                    b.Property<DateTime>("CreatedIn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_in")
                        .HasComment("Data de criação");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_active")
                        .HasComment("Fornecedor ativo no sistema");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("name")
                        .HasComment("Nome do fornecedor");

                    b.Property<DateTime>("UpdatedIn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_in")
                        .HasComment("Data de atualização");

                    b.HasKey("Id");

                    b.HasIndex("Cnpj");

                    b.ToTable("supplier", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Domain.Entity.Address", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entity.Supplier", null)
                        .WithMany("Addresses")
                        .HasForeignKey("id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ecommerce.Domain.Entity.Product", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entity.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerce.Domain.Entity.Coupon", "Coupon")
                        .WithMany("Products")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ecommerce.Domain.Entity.Promotion", "Promotion")
                        .WithMany("Products")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ecommerce.Domain.Entity.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Coupon");

                    b.Navigation("Promotion");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entity.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entity.Coupon", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entity.Promotion", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entity.Supplier", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
