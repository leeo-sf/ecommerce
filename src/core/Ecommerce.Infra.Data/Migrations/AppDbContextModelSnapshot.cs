// <auto-generated />
using System;
using Ecommerce.Infra.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Ecommerce.Infra.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Ecommerce.Domain.Entity.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("neighborhood");

                    b.Property<string>("PublicPlace")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("public_place");

                    b.Property<Guid>("UfId")
                        .HasColumnType("uuid");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("zip_code");

                    b.HasKey("Id");

                    b.HasIndex("UfId");

                    b.ToTable("address_table");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entity.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("category_table");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entity.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("color");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.PrimitiveCollection<string[]>("ImagesUrl")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("images_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(180)
                        .HasColumnType("character varying(180)")
                        .HasColumnName("name");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("integer")
                        .HasColumnName("quantity_in_stock");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SupplierId");

                    b.ToTable("product_table");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Ecommerce.Domain.Entity.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.HasKey("Id");

                    b.ToTable("supplier_tables");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entity.Clothing", b =>
                {
                    b.HasBaseType("Ecommerce.Domain.Entity.Product");

                    b.Property<Guid>("ClothingCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TissueId")
                        .HasColumnType("uuid");

                    b.HasIndex("ClothingCategoryId");

                    b.HasIndex("SizeId");

                    b.HasIndex("TissueId");

                    b.ToTable("clothing_table");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entity.Electronic", b =>
                {
                    b.HasBaseType("Ecommerce.Domain.Entity.Product");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.HasIndex("TypeId");

                    b.ToTable("electronic_table");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entity.Address", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entity.Category", "Uf")
                        .WithMany()
                        .HasForeignKey("UfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Uf");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entity.Product", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entity.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerce.Domain.Entity.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entity.Clothing", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entity.Category", "ClothingCategory")
                        .WithMany()
                        .HasForeignKey("ClothingCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerce.Domain.Entity.Product", null)
                        .WithOne()
                        .HasForeignKey("Ecommerce.Domain.Entity.Clothing", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerce.Domain.Entity.Category", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerce.Domain.Entity.Category", "Tissue")
                        .WithMany()
                        .HasForeignKey("TissueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClothingCategory");

                    b.Navigation("Size");

                    b.Navigation("Tissue");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entity.Electronic", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entity.Product", null)
                        .WithOne()
                        .HasForeignKey("Ecommerce.Domain.Entity.Electronic", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerce.Domain.Entity.Category", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entity.Supplier", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
